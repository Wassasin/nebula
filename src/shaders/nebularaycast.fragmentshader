#version 130

in vec4 frag_vertex;

uniform sampler2D frontface_tex;
uniform sampler3D volume_tex;

uniform int inside_volume;
uniform mat4 mvp;
uniform vec3 camerapos;

uniform float stepsize;

void main(void)
{
	vec3 front_vertex = vec3(0, 0, 0);
	vec4 back_position = mvp * frag_vertex;

	if(inside_volume == 1)
		front_vertex = camerapos;
	else
	{
		vec2 texc = ((back_position.xy / back_position.w) + 1) / 2;
		front_vertex = texture2D(frontface_tex, texc).xyz;
	}
	
	vec4 front_position = mvp * vec4(front_vertex, 1.0);
	vec3 dir = frag_vertex.xyz - front_vertex;
	
	float len = length(dir.xyz);
	vec3 norm_dir = normalize(dir);
	vec3 delta_dir = norm_dir * stepsize;
	float delta_dir_len = length(delta_dir);
	
	vec3 vec = front_vertex;
	vec4 col_acc = vec4(0, 0, 0, 0);
	float alpha_acc = 0;
	float length_acc = 0;
	
	vec4 color_sample;
	float alpha_sample;
	for(int i = 0; i < 1000; ++i)
	{
		color_sample = texture3D(volume_tex, vec);
		alpha_sample = color_sample.a * stepsize;
		
		col_acc += (1.0 - alpha_acc) * color_sample * alpha_sample * 3;
		alpha_acc += alpha_sample;
		vec += delta_dir;
		length_acc += delta_dir_len;
		
		if(length_acc >= len || alpha_acc > 1.0)
			break; // Terminate if opacity > 1, or the ray is outside the volume
	}
	
	gl_FragColor = col_acc;
}
